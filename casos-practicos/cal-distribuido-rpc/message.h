/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MESSAGE_H_RPCGEN
#define _MESSAGE_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


struct result {
	int value;
	int status;
};
typedef struct result result;

struct d_add_1_argument {
	int a;
	int b;
};
typedef struct d_add_1_argument d_add_1_argument;

struct d_divide_1_argument {
	int a;
	int b;
};
typedef struct d_divide_1_argument d_divide_1_argument;

#define CALC 55555
#define CALC_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define d_add 1
extern  enum clnt_stat d_add_1(int , int , struct result *, CLIENT *);
extern  bool_t d_add_1_svc(int , int , struct result *, struct svc_req *);
#define d_divide 2
extern  enum clnt_stat d_divide_1(int , int , struct result *, CLIENT *);
extern  bool_t d_divide_1_svc(int , int , struct result *, struct svc_req *);
#define d_neg 3
extern  enum clnt_stat d_neg_1(int , struct result *, CLIENT *);
extern  bool_t d_neg_1_svc(int , struct result *, struct svc_req *);
extern int calc_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define d_add 1
extern  enum clnt_stat d_add_1();
extern  bool_t d_add_1_svc();
#define d_divide 2
extern  enum clnt_stat d_divide_1();
extern  bool_t d_divide_1_svc();
#define d_neg 3
extern  enum clnt_stat d_neg_1();
extern  bool_t d_neg_1_svc();
extern int calc_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_result (XDR *, result*);
extern  bool_t xdr_d_add_1_argument (XDR *, d_add_1_argument*);
extern  bool_t xdr_d_divide_1_argument (XDR *, d_divide_1_argument*);

#else /* K&R C */
extern bool_t xdr_result ();
extern bool_t xdr_d_add_1_argument ();
extern bool_t xdr_d_divide_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MESSAGE_H_RPCGEN */
